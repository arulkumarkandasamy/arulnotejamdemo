
# backendconfig
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  namespace: {{ .Values.namespace }}
  name: {{ .Values.nginx.backend_config_name }}
spec:
  timeoutSec: 40
  connectionDraining:
    drainingTimeoutSec: 60
  logging:
    enable: false
---
# service
apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Values.namespace }}
  name: {{ .Values.nginx.service_name }}
  annotations:
    cloud.google.com/neg: '{"ingress": true}' # Creates an NEG native LB Container after an Ingress is created
    cloud.google.com/backend-config: '{"ports": {"80":"{{ .Values.nginx.backend_config_name }}"}}'
  labels:
    app: {{ .Values.nginx.app }}
spec:
  type: ClusterIP
  selector:
    app: {{ .Values.nginx.app }}
  ports:
  - port: {{ .Values.nginx.port }}
    protocol: TCP
    targetPort: {{ .Values.nginx.port }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ .Values.namespace }}
  name: {{ .Values.nginx.nginx_config_map }}
data:
  proxy.conf: |
    server {
      listen                  {{ .Values.nginx.port }};
      server_name             _;
     
      client_max_body_size 1G;

      location / {
        proxy_pass http://{{ .Values.notejam.service_name }}.{{ .Values.namespace }}.svc.cluster.local/;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header Host {{ .Values.ingress.dns }};
        proxy_redirect off;
        port_in_redirect off;
        proxy_pass_request_headers on;
        proxy_read_timeout 1800;
        proxy_connect_timeout 1800;
        proxy_send_timeout 1800;
        send_timeout 1800;
      }

      location /ui/ {
        proxy_pass http://{{ .Values.notejam.service_name }}.{{ .Values.namespace }}.svc.cluster.local/api/;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header Host {{ .Values.ingress.dns }};        
        proxy_redirect off;
        port_in_redirect off;
        proxy_pass_request_headers on;
        proxy_read_timeout 1800;
        proxy_connect_timeout 1800;
        proxy_send_timeout 1800;
        send_timeout 1800;
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace }}
  name: {{ .Values.nginx.deployment_name }}
spec:
  replicas: 1
  revisionHistoryLimit: 5
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: {{ .Values.nginx.app }}
  template:
    metadata:
      labels:
        app: {{ .Values.nginx.app }}
        env: {{ .Values.nginx.env }}
    spec:
      containers:
      - name: nginx
        image: {{ .Values.nginx.image.repository }}:{{ .Values.nginx.image.tag | default "latest" }}'
        imagePullPolicy: IfNotPresent
        securityContext:
          readOnlyRootFilesystem: false
          privileged: false
        ports:
        - containerPort: {{ .Values.nginx.port }}
        volumeMounts:
          - name: {{ .Values.nginx.nginx_config_map_volume }}
            mountPath: /etc/nginx/conf.d
        resources:
            requests:
               cpu: "100m"
               memory: "200Mi"
            limits:
               cpu: "500m"
               memory: "600Mi"
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 8
        livenessProbe:
           httpGet:
             path: /
             port: 8080
           initialDelaySeconds: 15
           periodSeconds: 8
        lifecycle: # zero-downtime for rolling deployment
          preStop:
            exec:
              command: ["sh", "-c", "sleep 8"]
      volumes:
        - name: {{ .Values.nginx.nginx_config_map_volume }}
          configMap:
            name: {{ .Values.nginx.nginx_config_map }}